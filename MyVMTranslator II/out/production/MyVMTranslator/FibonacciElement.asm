@Func.Sys.init
0;JMP
// function Sys.init 0 
(Func.Sys.init)
// push constant 4 
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1 
@Return.Func.Main.fibonacci0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Func.Main.fibonacci
0;JMP
(Return.Func.Main.fibonacci0)
// label WHILE 
(GGLS_WHILE)
// goto WHILE 
@GGLS_WHILE
0;JMP
// function Main.fibonacci 0 
(Func.Main.fibonacci)
// push argument 0 
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt 
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@GGLS_JMP_0
D;JGE
@SP
A=M-1
D=M-D
M=-1
@GGLS_JMP_END_0
0;JMP
(GGLS_JMP_0)
@SP
A=M-1
D=M-D
M=0
(GGLS_JMP_END_0)
// if-goto IF_TRUE 
@SP
M=M-1
A=M
D=M
@GGLS_IF_TRUE
D;JNE
// goto IF_FALSE 
@GGLS_IF_FALSE
0;JMP
// label IF_TRUE 
(GGLS_IF_TRUE)
// push argument 0 
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return 
@LCL
D=M
@endFrame
M=D
@endFrame
D=M
@5
A=D-A
D=M
@retAddr
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@endFrame
D=M
@1
A=D-A
D=M
@THAT
M=D
@endFrame
D=M
@2
A=D-A
D=M
@THIS
M=D
@endFrame
D=M
@3
A=D-A
D=M
@ARG
M=D
@endFrame
D=M
@4
A=D-A
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// label IF_FALSE 
(GGLS_IF_FALSE)
// push argument 0 
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// call Main.fibonacci 1 
@Return.Func.Main.fibonacci1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Func.Main.fibonacci
0;JMP
(Return.Func.Main.fibonacci1)
// push argument 0 
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// call Main.fibonacci 1 
@Return.Func.Main.fibonacci2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Func.Main.fibonacci
0;JMP
(Return.Func.Main.fibonacci2)
// add 
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// return 
@LCL
D=M
@endFrame
M=D
@endFrame
D=M
@5
A=D-A
D=M
@retAddr
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@endFrame
D=M
@1
A=D-A
D=M
@THAT
M=D
@endFrame
D=M
@2
A=D-A
D=M
@THIS
M=D
@endFrame
D=M
@3
A=D-A
D=M
@ARG
M=D
@endFrame
D=M
@4
A=D-A
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
